{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.scss","utils/validators.ts","components/Login/Login.module.scss","components/Login/Login.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","input","props","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","form__summaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"+TAWMA,EAA8C,SAAC,GAI9C,IAHHC,EAGE,EAHFA,KACAC,EAEE,EAFFA,SAGMC,GADJ,iBACeF,EAAKG,SAAWH,EAAKI,OACtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACI,8BAAMH,IACLC,GAAY,+BAAOF,EAAKI,YAKxBI,EAAwC,SAAC,GAI/C,IAHHC,EAGE,EAHFA,MACAT,EAEE,EAFFA,KACGU,EACD,iBACF,OACI,cAACX,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACI,oDAAcS,GAAWC,QAKxBC,EAAqC,SAAC,GAI5C,IAHHF,EAGE,EAHFA,MACAT,EAEE,EAFFA,KACGU,EACD,iBACF,OACI,cAACX,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACI,iDAAWS,GAAWC,QAK3B,SAASE,EACZC,EAEAC,EACAC,EACAC,GAGD,IAFCN,EAEF,uDAFU,GACRO,EACF,uDADS,GAEP,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPN,IACL,IACFO,O,oBClEbE,EAAOC,QAAU,CAAC,MAAQ,+B,iCCC1B,oEAAO,IAAMC,EAA+B,SAACC,GACzC,OAAOA,OAAQC,EAAY,qBAGlBC,EAAmB,SAACC,GAAD,OAA2C,SAACH,GACxE,OAAQA,EAAMI,OAASD,EAAhB,wBAA8CA,EAA9C,iBAAoEF,K,oBCN/EJ,EAAOC,QAAU,CAAC,mBAAqB,oC,iCCDvC,2FAoEMO,EAAiBC,YAAsD,CACzEC,KAAM,SADaD,EA5CnB,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAc1B,EAAwB,EAAxBA,MAAO2B,EAAiB,EAAjBA,WACxB,OACI,uBAAMC,SAAUF,EAAhB,UACKlB,YACG,QACA,QACA,CAACS,KACDV,KAEHC,YACG,WACA,WACA,CAACS,KACDV,IACA,CACIsB,KAAM,aAGbrB,iBACGW,EACA,aACA,GACAZ,IACA,CAAEsB,KAAM,YACR,eAEHF,GAAc,qBAAKG,IAAKH,IACxBA,GACGnB,YACI,qBACA,UACA,CAACS,KACDV,IACA,IAEPP,GAAS,sBAAKC,UAAWC,IAAE6B,mBAAlB,cAAwC/B,EAAxC,OACV,gCACK,IACD,qDA+CDgC,uBALS,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,OACnBP,WAAYM,EAAME,KAAKR,cAGa,CAAES,WAA3BJ,EA7BmD,SAAC,GAI5D,IAHHI,EAGE,EAHFA,MACAF,EAEE,EAFFA,OACAP,EACE,EADFA,WAUA,OAAIO,EACO,cAAC,IAAD,CAAUG,GAAI,aAGrB,gCACI,wCACA,cAACd,EAAD,CAAgBK,SAdP,SAACU,GACdF,EACIE,EAASC,MACTD,EAASE,SACTF,EAASG,WACTH,EAASI,UAS2Bf,WAAYA","file":"static/js/6.81d0cbde.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__summaryError\":\"Login_form__summaryError__1b8EM\"};","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, GetStringKeys, Input } from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport s from \"./Login.module.scss\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null;\r\n};\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> &\r\n        LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Email\",\r\n                \"email\",\r\n                [required],\r\n                Input\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Password\",\r\n                \"password\",\r\n                [required],\r\n                Input,\r\n                {\r\n                    type: \"password\",\r\n                }\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                \"rememberMe\",\r\n                [],\r\n                Input,\r\n                { type: \"checkbox\" },\r\n                \"remember me\"\r\n            )}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\r\n                    \"Symbols from image\",\r\n                    \"captcha\",\r\n                    [required],\r\n                    Input,\r\n                    {}\r\n                )}\r\n            {error && <div className={s.form__summaryError}> {error} </div>}\r\n            <div>\r\n                {\" \"}\r\n                <button>Login </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n};\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void;\r\n};\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = ({\r\n    login,\r\n    isAuth,\r\n    captchaUrl,\r\n}) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        login(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe,\r\n            formData.captcha\r\n        );\r\n    };\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"} />;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}