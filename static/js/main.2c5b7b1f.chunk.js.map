{"version":3,"sources":["utils/validators.ts","assets/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/Header/Header.module.scss","components/common/Pagination/Pagination.module.scss","components/Login/Login.module.scss","api/api.ts","api/auth-api.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/common/Pagination/Pagination.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Login/LoginPage.tsx","components/App/App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/Users/Users.module.scss","components/App/App.module.scss"],"names":["required","value","undefined","maxLengthCreator","maxLength","length","Preloader","src","preloader","module","exports","profileAPI","userId","instance","get","then","response","data","newStatus","put","status","file","formData","FormData","append","headers","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreater","type","payload","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","filter","post","SEND_MESSAGE","dialogs","name","messages","sendMessageCreater","newMessageBody","dialogsReducer","body","subcribers","ws","notifySubscribersAboutStatus","forEach","s","closeHandler","console","log","setTimeout","createChannel","messageHandler","e","JSON","parse","openHandler","errorHandler","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","MESSAGES_RECEIVED","STATUS_CHANGED","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","map","m","v1","ind","array","axios","create","withCredentials","baseURL","ResultCodesEnum","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","delete","follow","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_FILTER","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","requestUsers","page","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","login","isAuth","captchaUrl","getAuthUserData","Success","getCaptchaUrl","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","useSelector","useDispatch","Layout","className","header","span","style","backgroundColor","icon","UserOutlined","onClick","to","Pagination","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","React","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","p","selectedPage","User","user","userProfile","userProfile__photo","small","userPhoto","userProfile__button","disabled","some","userProfile__info","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","getIsFetching","getUsersFilter","validate","values","UsersSearchForm","onFilterChanged","initialValues","String","onSubmit","setSubmitting","enableReinitialize","isSubmitting","as","memo","Users","useSearchParams","searchParams","setSearchParams","useEffect","parsed","Object","fromEntries","actualPage","actualFilter","query","_follow","bind","_unfollow","pageNumber","UsersPage","LoginReduxForm","reduxForm","handleSubmit","createField","Input","form__summaryError","LoginPage","CaptchaIsRequired","ProfileContainer","lazy","DialogsContainer","ChatPage","App","collapsed","setCollapsed","Content","Footer","Sider","SubMenu","Menu","initializeAppCB","promise","all","catchAllUnhandledError","minHeight","collapsible","onCollapse","logo","theme","mode","title","Item","TeamOutlined","siteLayout","margin","siteLayoutBackground","padding","content","fallback","path","element","textAlign","ReactDOM","render","document","getElementById","FormControl","meta","children","hasError","touched","formControl","Textarea","input","props","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.2c5b7b1f.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","export default __webpack_public_path__ + \"static/media/preloader.ea356991.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/preloader.svg\";\r\n\r\nexport const Preloader:React.FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} />\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","import { PhotosType, ProfileType } from \"../types/types\"\r\nimport { instance, APIResponseType } from \"./api\"\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(newStatus: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, { status: newStatus })\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(file: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile)\r\n            .then(response => response.data)\r\n    },\r\n}","import { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { profileAPI } from '../api/profile-api'\r\nimport { PhotosType, PostsType, ProfileType } from '../types/types';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst ADD_POST = 'SN/PROFILE/ADD-POST';\r\nconst DELETE_POST = 'SN/PROFILE/DELETE_POST';\r\nconst SET_USER_PROFILE = 'SN/PROFILE/SET_USER_PROFILE';\r\nconst SET_STATUS = 'SN/PROFILE/SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE_PHOTO_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ProfileReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeProfileReducer = BaseThunkType<ProfileReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Hello', likesCount: 12 },\r\n        { id: 2, message: 'Good day!', likesCount: 34 },\r\n        { id: 3, message: 'Great weather', likesCount: 52 },\r\n        { id: 4, message: 'Welcome!', likesCount: 42 },\r\n        { id: 5, message: 'Hi', likesCount: 18 },\r\n        { id: 6, message: 'Ooops))', likesCount: 62 },\r\n    ] as PostsType[],\r\n    profile: null as null | ProfileType,\r\n    status: '',\r\n    newPostText: '',\r\n}\r\nconst profileReducer = (state = initialState, action: ProfileReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.payload.newPostText,\r\n                likesCount: 0\r\n            };\r\n            // return { ...state, posts: [...state.posts, newPost]};\r\n            return { ...state, posts: [...state.posts, newPost], newPostText: '' };\r\n        case DELETE_POST:\r\n            return { ...state, posts: state.posts.filter(post => action.payload.postId !== post.id) }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: action.payload.profile }\r\n        case SET_STATUS:\r\n            return { ...state, status: action.payload.status }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return { ...state, profile: { ...state.profile, photos: action.payload.photos } as ProfileType } //Исправить\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreater: (newPostText: string) => ({ type: ADD_POST, payload: { newPostText } }) as const,\r\n    setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFILE, payload: { profile } }) as const,\r\n    setStatus: (status: string) => ({ type: SET_STATUS, payload: { status } }) as const,\r\n    deletePost: (postId: number) => ({ type: DELETE_POST, payload: { postId } }) as const,\r\n    savePhotoSuccess: (photos: PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, payload: { photos } }) as const,\r\n}\r\n\r\nexport const getUserProfile = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getUserProfile(userId)\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\nexport const getStatus = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (!data.resultCode) { dispatch(actions.setStatus(status)) }\r\n    }\r\n    catch (error) { }\r\n}\r\nexport const savePhoto = (file: any): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    if (!data.resultCode) { dispatch(actions.savePhotoSuccess(data.data.photos)) }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkTypeProfileReducer => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    let data = await profileAPI.saveProfile(profile)\r\n    if (!data.resultCode) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"UserId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', { _error: data.message[0] }))\r\n        return Promise.reject(data.message[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import { ActionsTypes } from \"./redux-store\";\r\n\r\nconst SEND_MESSAGE = 'SN/DIALOGS/SEND_MESSAGE';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Viktor' },\r\n        { id: 2, name: 'Sveta' },\r\n        { id: 3, name: 'Igor' },\r\n        { id: 4, name: 'Masha' },\r\n        { id: 5, name: 'Petya' },\r\n        { id: 6, name: 'Viсtoria' }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'Bye' },\r\n        { id: 3, message: 'Hello' },\r\n        { id: 4, message: 'Mess' },\r\n        { id: 5, message: 'Mess123' },\r\n        { id: 6, message: 'Mess456' },\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsReducerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.payload.newMessageBody;\r\n            return { ...state, messages: [...state.messages, { id: 7, message: body }] };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    sendMessageCreater: (newMessageBody: string) => ({ type: SEND_MESSAGE, payload: { newMessageBody } } as const)\r\n}\r\n\r\nexport type DialogsReducerActionTypes = ActionsTypes<typeof actions>\r\nexport default dialogsReducer;","import { StatusType } from \"../redux/chat-reducer\";\r\n\r\nlet subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[],\r\n}\r\n\r\nlet ws: WebSocket | null = null;\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers[\"status-changed\"].forEach(s => s(status))\r\n}\r\nconst closeHandler = () => {\r\n    console.log(\"close channel\");\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    let data = JSON.parse(e.data);\r\n    // setMessages((prevMessages) => [...prevMessages, ...data]);\r\n    subcribers['messages-received'].forEach(s => s(data))\r\n};\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('Refresh page!')\r\n};\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener(\"close\", closeHandler);\r\n    ws?.removeEventListener(\"message\", messageHandler);\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close();\r\n\r\n    ws = new WebSocket(\r\n        \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\r\n    );\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener(\"close\", closeHandler);\r\n    ws.addEventListener(\"message\", messageHandler);\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            //@ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    },\r\n\r\n}\r\n\r\nexport type ChatMessageType = {\r\n    message: string;\r\n    photo: string;\r\n    userId: number;\r\n    userName: string;\r\n};\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void","import { randomUUID } from 'crypto';\r\nimport { Dispatch } from 'redux';\r\nimport { FormAction } from 'redux-form';\r\nimport { ChatMessageType, chatAPI } from '../api/chat-api';\r\nimport { ActionsTypes, BaseThunkType } from \"./redux-store\";\r\nimport { v1 } from 'uuid'\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ChatReducerActionTypes = ActionsTypes<typeof actions>\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\ntype ChatMessageTypeWithV1 = ChatMessageType & { id: string }\r\n\r\nconst MESSAGES_RECEIVED = 'SN/CHAT/MESSAGES_RECEIVED';\r\nconst STATUS_CHANGED = 'SN/CHAT/STATUS_CHANGED';\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageTypeWithV1[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ChatReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case MESSAGES_RECEIVED:\r\n            return {\r\n                ...state, messages: [...state.messages, ...action.payload.messages.map(m => ({ ...m, id: v1() }))]\r\n                    .filter((m, ind, array) => ind >= array.length - 100)\r\n            }\r\n        case STATUS_CHANGED:\r\n            return { ...state, status: action.payload.status }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messageReceived: (messages: ChatMessageType[]) => (\r\n        { type: MESSAGES_RECEIVED, payload: { messages } } as const\r\n    ),\r\n    statusChanged: (status: StatusType) => (\r\n        { type: STATUS_CHANGED, payload: { status } } as const\r\n    ),\r\n\r\n}\r\nlet _newMessageHandler: ((message: ChatMessageType[]) => void) | null = null\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages: ChatMessageType[]) => {\r\n            dispatch(actions.messageReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status: StatusType) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): BaseThunkType<ChatReducerActionTypes> => async (dispatch) => {\r\n    chatAPI.start()\r\n    //@ts-ignore\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    //@ts-ignore\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): BaseThunkType<ChatReducerActionTypes> => async (dispatch) => {\r\n    //@ts-ignore\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    //@ts-ignore\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n// export const sendMessage = (message: string): BaseThunkType<ChatReducerActionTypes> => async (dispatch) => {\r\nexport const sendMessage = (message: string): BaseThunkType<ActionsType | FormAction> => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1W_Jk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__1rooW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__summaryError\":\"Login_form__summaryError__1b8EM\"};","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\nimport { ResultCodesEnum } from './auth-api';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"e82d0870-e644-47bb-8212-44d44c6489be\",\r\n    }\r\n})\r\n\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    message: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n","import { instance, APIResponseType } from \"./api\"\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, { email, password, rememberMe, captcha })\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10,\r\n}","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import { GetItemsType, instance, APIResponseType } from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+(friend===null?\"\":`&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/` + userId)\r\n            .then(response => response.data) as Promise<APIResponseType>\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/` + userId)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps }\r\n        }\r\n        return u\r\n    })\r\n}\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { APIResponseType } from '../api/api';\r\nimport { usersAPI } from '../api/users-api'\r\nimport { PhotosType, UserType } from '../types/types';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst SET_USERS = 'SN/USERS/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SN/USERS/SET_CURRENT_PAGE';\r\nconst SET_FILTER = 'SN/USERS/SET_FILTER';\r\nconst SET_TOTAL_COUNT = 'SN/USERS/SET_TOTAL_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport type UserReducerActionsTypes = ActionsTypes<typeof actions>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array os users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UserReducerActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: true } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: true }) };\r\n        case UNFOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: false } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: false }) };\r\n        case SET_USERS:\r\n            return { ...state, users: action.payload.users };\r\n        case SET_CURRENT_PAGE:\r\n            return { ...state, currentPage: action.payload.currentPage }\r\n        case SET_FILTER:\r\n            return { ...state, filter: action.payload }\r\n        case SET_TOTAL_COUNT:\r\n            return { ...state, totalUsersCount: action.payload.totalUsersCount }\r\n        case TOGGLE_IS_FETCHING:\r\n            return { ...state, isFetching: action.payload.isFetching }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (id: number) => ({ type: FOLLOW, payload: { id } } as const),\r\n    unfollowSuccess: (id: number) => ({ type: UNFOLLOW, payload: { id } } as const),\r\n    setUsers: (users: UserType[]) => ({ type: SET_USERS, payload: { users } } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: SET_CURRENT_PAGE, payload: { currentPage } } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, payload:  filter  } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: SET_TOTAL_COUNT, payload: { totalUsersCount } } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, payload: { isFetching } } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const),\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n    const data = await usersAPI\r\n        .getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UserReducerActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => UserReducerActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    const data = await apiMethod(userId)\r\n    !data.resultCode && dispatch(actionCreator(userId));\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    let actionCreator = actions.followSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\nexport const unfollow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    let actionCreator = actions.unfollowSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n","import { instance } from \"./api\"\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(response => response.data)\r\n    },\r\n}","import { Action } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { authAPI, ResultCodesEnum } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { AppStateType, ActionsTypes, BaseThunkType } from './redux-store';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type AuthReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeAuthReducer = BaseThunkType<AuthReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nconst SET_USER_DATA = 'SN/AUTH/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        { type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const\r\n    ),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        { type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } } as const\r\n    )\r\n}\r\n\r\nexport const getAuthUserData = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const { id, login, email } = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkTypeAuthReducer => async (dispatch) => { \r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const message = data.message.length > 0 ? data.message[0] : 'Some error'  //messages => message\r\n        const action = stopSubmit('login', { _error: message })\r\n        dispatch(action)\r\n    }\r\n}\r\nexport const logout = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer;","import { ThunkAction } from 'redux-thunk';\r\nimport { getAuthUserData } from './auth-reducer';\r\nimport { AppStateType } from './redux-store';\r\nimport {ActionsTypes} from './redux-store';\r\n\r\nconst INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppReducerActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return { ...state, initialized: true };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({ type: INITIALIZED_SUCCESS })\r\n}\r\ntype AppReducerActionTypes = ActionsTypes<typeof actions>\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, AppReducerActionTypes>\r\n\r\nexport const initializeApp = () => (dispatch: any) => {   //ТИПИЗАЦИЯ\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","import { legacy_createStore as createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\nimport chatReducer from './chat-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer,\r\n})\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n// let store = createStore(rootReducer, applyMiddleware(thunk));\r\ntype PropertyTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type ActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertyTypes<T>>\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Button, Avatar, Row, Col, Layout } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { logout } from \"../../redux/auth-reducer\";\r\n\r\nexport const Header: React.FC = () => {\r\n    const isAuth = useSelector<AppStateType>((state) => state.auth.isAuth);\r\n    const login = useSelector<AppStateType>((state) => state.auth.login);\r\n    const dispatch = useDispatch();\r\n    const logOutFunc = () => {\r\n        //@ts-ignore\r\n        dispatch(logout());\r\n    };\r\n\r\n    const { Header } = Layout;\r\n\r\n    return (\r\n        <Header className={s.header}>\r\n            <Row>\r\n                <>\r\n                    {isAuth && (\r\n                        <Col span={22}>\r\n                            <><Avatar\r\n                                style={{ backgroundColor: \"#1890ff\" }}\r\n                                icon={<UserOutlined />}\r\n                            />\r\n                            {login}\r\n                            </>\r\n                        </Col>\r\n                    )}\r\n                    <Col span={2}>\r\n                        {isAuth ? (\r\n                            <Button type=\"primary\" onClick={logOutFunc}>\r\n                                Logout\r\n                            </Button>\r\n                        ) : (\r\n                            <Button type=\"primary\">\r\n                                <NavLink to=\"/login\">Login</NavLink>\r\n                            </Button>\r\n                        )}\r\n                    </Col>\r\n                </>\r\n            </Row>\r\n        </Header>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport s from \"./Pagination.module.scss\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    onPageChanged: (pageNumber: number) => void;\r\n    portionSize?: number;\r\n};\r\n\r\nconst Pagination: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 10,\r\n}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = React.useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1);\r\n                    }}\r\n                >\r\n                    «\r\n                </button>\r\n            )}\r\n\r\n            {pages\r\n                .filter(\r\n                    (p) =>\r\n                        p >= leftPortionPageNumber &&\r\n                        p <= rightPortionPageNumber\r\n                )\r\n                .map((p) => {\r\n                    return (\r\n                        <span\r\n                            className={\r\n                                (currentPage === p && s.selectedPage) || \"\"\r\n                            }\r\n                            key={p}\r\n                            onClick={(e) => onPageChanged(p)}\r\n                        >\r\n                            {p}\r\n                        </span>\r\n                    );\r\n                })}\r\n            {portionCount > portionNumber && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1);\r\n                    }}\r\n                >\r\n                    »\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport s from \"./Users.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType;\r\n    followingInProgress: Array<number>;\r\n    unfollow: (userId: number) => void;\r\n    follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n    user,\r\n    followingInProgress,\r\n    unfollow,\r\n    follow,\r\n}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.userProfile} key={user.id}>\r\n                <div className={s.userProfile__photo}>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img\r\n                            src={\r\n                                user.photos.small ||\r\n                                \"https://binkor.ru/images/vopros/user_hover.png\"\r\n                            }\r\n                            className={s.userPhoto}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div className={s.userProfile__button}>\r\n                    {user.followed ? (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                follow(user.id);\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className={s.userProfile__info}>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst getUsersSel = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSel, (users) => {\r\n    return users\r\n    // return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { FilterType } from \"../../redux/users-reducer\";\r\nimport { getUsersFilter } from \"../../redux/users-selectors\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void;\r\n};\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string;\r\n    friend: FriendFormType;\r\n};\r\n\r\nconst validate = (values: FormType) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = ({ onFilterChanged }) => {\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const submit = (\r\n        values: FormType,\r\n        { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n    ) => {\r\n        // @ts-ignore\r\n        onFilterChanged(values);\r\n        setSubmitting(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    term: filter.term,\r\n                    friend: String(filter.friend) as FriendFormType,\r\n                }}\r\n                validate={validate}\r\n                onSubmit={submit}\r\n                enableReinitialize\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);\r\n\r\n// const submit = (\r\n//     values: FormType,\r\n//     { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n// ) =>\r\n//     {\r\n//         const filter: FilterType = {\r\n//             term: values.term,\r\n//             friend:\r\n//                 values.friend === \"null\"\r\n//                     ? null\r\n//                     : values.friend === \"true\"\r\n//                     ? true\r\n//                     : false,\r\n//         };\r\n\r\n//         onFilterChanged(filter);\r\n//         setSubmitting(false);\r\n//     };\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Pagination from \"../common/Pagination/Pagination\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {\r\n    actions,\r\n    FilterType,\r\n    requestUsers,\r\n    follow,\r\n    unfollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter,\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Users: React.FC<PropsType> = () => {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const users = useSelector(getUsers);\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    React.useEffect(() => {\r\n        const parsed = Object.fromEntries(searchParams);\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n        if (parsed.page) actualPage = +parsed.page;\r\n        if (parsed.term) actualFilter = { ...actualFilter, term: parsed.term };\r\n        if (parsed.friend)\r\n            actualFilter = {\r\n                ...actualFilter,\r\n                friend:\r\n                    parsed.friend === \"null\"\r\n                        ? null\r\n                        : parsed.friend === \"true\"\r\n                        ? true\r\n                        : false,\r\n            };\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        const term = filter.term;\r\n        const friend = filter.friend;\r\n\r\n        let query =\r\n            (term === \"\" ? \"\" : `&term=${term}`) +\r\n            (friend === null ? \"\" : `&friend=${friend}`) +\r\n            (currentPage === 1 ? \"\" : `&page=${currentPage}`);\r\n\r\n        setSearchParams(query);\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const _follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    };\r\n    const _unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Pagination\r\n                    currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}\r\n                    totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n            </div>\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            </div>\r\n            {users.map((user) => (\r\n                <User\r\n                    key={user.id}\r\n                    user={user}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={_unfollow}\r\n                    follow={_follow}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Preloader } from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching } from \"../../redux/users-selectors\";\r\n\r\nexport const UsersPage: React.FC = () => {\r\n    const isFetching = useSelector(getIsFetching);\r\n    return (\r\n        <>\r\n            {isFetching && <Preloader />}\r\n            <Users />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    Input,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport s from \"./Login.module.scss\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null;\r\n};\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> &\r\n        LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Email\",\r\n                \"email\",\r\n                [required],\r\n                Input\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Password\",\r\n                \"password\",\r\n                [required],\r\n                Input,\r\n                {\r\n                    type: \"password\",\r\n                }\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                \"rememberMe\",\r\n                [],\r\n                Input,\r\n                { type: \"checkbox\" },\r\n                \"remember me\"\r\n            )}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\r\n                    \"Symbols from image\",\r\n                    \"captcha\",\r\n                    [required],\r\n                    Input,\r\n                    {}\r\n                )}\r\n            {error && <div className={s.form__summaryError}> {error} </div>}\r\n            <div>\r\n                {\" \"}\r\n                <button>Login </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector(\r\n        (state: AppStateType) => state.auth.captchaUrl\r\n    );\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(\r\n            login(\r\n                formData.email,\r\n                formData.password,\r\n                formData.rememberMe,\r\n                formData.captcha\r\n            )\r\n        );\r\n    };\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"} />;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, { lazy, Suspense, useState } from \"react\";\nimport { Route, Routes, Navigate, NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Header } from \"../Header/Header\";\nimport { initializeApp } from \"../../redux/app-reducer\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { UsersPage } from \"../Users/UsersPage\";\nimport { LoginPage } from \"../Login/LoginPage\";\n// import ChatPage from \"../../pages/chat/ChatPage\";\n\nimport s from \"./App.module.scss\";\nimport \"antd/dist/antd.css\";\nimport { TeamOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Layout, Menu } from \"antd\";\n\nconst ProfileContainer = lazy(() => import(\"../Profile/ProfileContainer\"));\nconst DialogsContainer = lazy(() => import(\"../Dialogs/DialogsContainer\"));\nconst ChatPage = lazy(() => import(\"../../pages/chat/ChatPage\"));\n// const Login = lazy(() => import(\"../Login/LoginPage\"));\n// const UsersPage = lazy(() => import(\"../Users/UsersPage\"));\n\nconst App: React.FC = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const { Content, Footer, Sider } = Layout;\n    const { SubMenu } = Menu;\n\n    const dispatch = useDispatch();\n    const initialized = useSelector<AppStateType>(\n        (state) => state.app.initialized\n    );\n    const initializeAppCB = () => {\n        //@ts-ignore\n        dispatch(initializeApp());\n    };\n\n    const catchAllUnhandledError = (e: PromiseRejectionEvent) => {\n        // alert(\"Some error\");\n    };\n\n    React.useEffect(() => {\n        // initializeApp();\n        window.addEventListener(\"unhandledrejection\", catchAllUnhandledError);\n        return () => {\n            window.removeEventListener(\n                \"unhandledrejection\",\n                catchAllUnhandledError\n            );\n        };\n    }, []);\n    React.useEffect(() => {\n        if (!initialized) {\n            initializeAppCB();\n        }\n    }, [initialized]);\n\n    if (!initialized) {\n        return <Preloader />;\n    }\n\n    return (\n        <Layout style={{ minHeight: \"100vh\" }}>\n            <Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={(value) => setCollapsed(value)}\n            >\n                <div className={s.logo} />\n                <Menu theme=\"dark\" mode=\"inline\">\n                    <SubMenu\n                        key=\"sub1\"\n                        icon={<UserOutlined />}\n                        title=\"My Profile\"\n                    >\n                        <Menu.Item key=\"1\">\n                            <NavLink to=\"/profile\">Profile</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <NavLink to=\"/dialogs\">Messages</NavLink>\n                        </Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Users\">\n                        <Menu.Item key=\"3\">\n                            <NavLink to=\"/users\">Users</NavLink>\n                        </Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub3\" icon={<TeamOutlined />} title=\"Chat\">\n                        <Menu.Item key=\"4\">\n                            <NavLink to=\"/chat\">Chat</NavLink>\n                        </Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Layout className={s.siteLayout}>\n                <Header />\n                <Content style={{ margin: \"0 16px\" }}>\n                    <div\n                        className={s.siteLayoutBackground}\n                        style={{ padding: 24, minHeight: 360 }}\n                    >\n                        <div className={s.content}>\n                            <Suspense fallback={<div>Loading...</div>}>\n                                <Routes>\n                                    <Route\n                                        path=\"/\"\n                                        element={<Navigate to={\"/profile\"} />}\n                                    />\n                                    <Route\n                                        path=\"/dialogs\"\n                                        element={<DialogsContainer />}\n                                    />\n                                    <Route\n                                        path=\"/profile\"\n                                        element={<ProfileContainer />}\n                                    >\n                                        <Route\n                                            path=\":userId\"\n                                            element={<ProfileContainer />}\n                                        />\n                                    </Route>\n                                    <Route\n                                        path=\"/users\"\n                                        element={<UsersPage />}\n                                    />\n                                    <Route\n                                        path=\"/login\"\n                                        element={<LoginPage />}\n                                    />\n                                    <Route\n                                        path=\"/chat\"\n                                        element={<ChatPage />}\n                                    />\n                                    <Route\n                                        path=\"/*\"\n                                        element={<div> 404 NOT FOUND </div>}\n                                    />\n                                </Routes>\n                            </Suspense>\n                        </div>\n                    </div>\n                </Content>\n                <Footer style={{ textAlign: \"center\" }}>\n                    Ant Design ©2022 Created by Victoria Kovaliova\n                </Footer>\n            </Layout>\n        </Layout>\n    );\n};\n\nexport default App;\n","import store from \"./redux/redux-store\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    // <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/LoginPage\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2dm5t\",\"userProfile\":\"Users_userProfile__1S7Vo\",\"userProfile__photo\":\"Users_userProfile__photo__1mEXt\",\"userProfile__button\":\"Users_userProfile__button__2CHXZ\",\"userProfile__info\":\"Users_userProfile__info__23TpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"App_logo__2Y3Fp\",\"siteLayout\":\"App_siteLayout__20lPD\",\"siteLayoutBackground\":\"App_siteLayoutBackground__myvat\"};"],"sourceRoot":""}