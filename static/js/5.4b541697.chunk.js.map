{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.scss","utils/validators.ts","hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.scss","components/Dialogs/Message/Message.js","components/Dialogs/Dialog/Dialog.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","input","props","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","Message","message","Dialog","id","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","mess","dialogs__items","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreater"],"mappings":"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","file":"static/js/5.4b541697.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1hcii\",\"dialog_active\":\"Dialogs_dialog_active__2WuLP\"};","import React from \"react\";\r\n\r\n\r\nfunction Message(props) {\r\n    return <div >\r\n        <div>{props.message}</div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Dialog(props) {\r\n    return <div >\r\n        <NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Dialog;\r\n\r\n","import React from \"react\";\r\nimport Message from \"./Message/Message\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport s from './Dialogs.module.scss';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators';\r\n\r\n\r\nfunction Dialogs(props) {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => <Dialog key={dialog.id} id={dialog.id} name={dialog.name} />);\r\n    let messagesElements = state.messages.map(mess => <Message key={mess.id} message={mess.message} />)\r\n\r\n    // let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst maxLength100 = maxLengthCreator(100) \r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                    name='newMessageBody'\r\n                    placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength100]} />\r\n                {/* onChange={onNewMessageChange} value={newMessageBody}  */}\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\nexport default Dialogs;\r\n\r\n","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport Dialogs from './Dialogs';\r\nimport {sendMessageCreater } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => dispatch(sendMessageCreater(newMessageBody)),\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs);\r\n\r\n"],"sourceRoot":""}