{"version":3,"sources":["utils/validators.ts","assets/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/Header/Header.module.scss","components/common/Pagination/Pagination.module.scss","components/Login/Login.module.scss","api/api.ts","api/auth-api.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/common/Pagination/Pagination.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Login/LoginPage.tsx","components/App/App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/Users/Users.module.scss","components/App/App.module.scss"],"names":["required","value","undefined","maxLengthCreator","maxLength","length","Preloader","src","preloader","module","exports","profileAPI","userId","instance","get","then","response","data","newStatus","put","status","file","formData","FormData","append","headers","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreater","type","payload","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","filter","post","SEND_MESSAGE","dialogs","name","messages","sendMessageCreater","newMessageBody","dialogsReducer","body","axios","create","withCredentials","baseURL","ResultCodesEnum","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","delete","follow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_FILTER","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","requestUsers","page","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","login","isAuth","captchaUrl","getAuthUserData","Success","getCaptchaUrl","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","useSelector","useDispatch","Layout","className","s","header","span","style","backgroundColor","icon","UserOutlined","onClick","to","Pagination","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","React","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","p","selectedPage","e","User","user","userProfile","userProfile__photo","small","userPhoto","userProfile__button","disabled","some","userProfile__info","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","getIsFetching","getUsersFilter","validate","values","UsersSearchForm","onFilterChanged","initialValues","String","onSubmit","setSubmitting","enableReinitialize","isSubmitting","as","memo","Users","useSearchParams","searchParams","setSearchParams","useEffect","parsed","Object","fromEntries","actualPage","actualFilter","query","_follow","bind","_unfollow","pageNumber","UsersPage","LoginReduxForm","reduxForm","handleSubmit","error","createField","Input","form__summaryError","LoginPage","CaptchaIsRequired","ProfileContainer","lazy","DialogsContainer","App","collapsed","setCollapsed","Content","Footer","Sider","SubMenu","Menu","initializeAppCB","promise","all","catchAllUnhandledError","addEventListener","removeEventListener","minHeight","collapsible","onCollapse","logo","theme","mode","title","Item","TeamOutlined","siteLayout","margin","siteLayoutBackground","padding","content","fallback","path","element","textAlign","ReactDOM","render","document","getElementById","FormControl","meta","children","hasError","touched","formControl","Textarea","input","props","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.f2b3f8c0.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","export default __webpack_public_path__ + \"static/media/preloader.ea356991.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/preloader.svg\";\r\n\r\nexport const Preloader:React.FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} />\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","import { PhotosType, ProfileType } from \"../types/types\"\r\nimport { instance, APIResponseType } from \"./api\"\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(newStatus: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, { status: newStatus })\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(file: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile)\r\n            .then(response => response.data)\r\n    },\r\n}","import { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { profileAPI } from '../api/profile-api'\r\nimport { PhotosType, PostsType, ProfileType } from '../types/types';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst ADD_POST = 'SN/PROFILE/ADD-POST';\r\nconst DELETE_POST = 'SN/PROFILE/DELETE_POST';\r\nconst SET_USER_PROFILE = 'SN/PROFILE/SET_USER_PROFILE';\r\nconst SET_STATUS = 'SN/PROFILE/SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE_PHOTO_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ProfileReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeProfileReducer = BaseThunkType<ProfileReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Hello', likesCount: 12 },\r\n        { id: 2, message: 'Good day!', likesCount: 34 },\r\n        { id: 3, message: 'Great weather', likesCount: 52 },\r\n        { id: 4, message: 'Welcome!', likesCount: 42 },\r\n        { id: 5, message: 'Hi', likesCount: 18 },\r\n        { id: 6, message: 'Ooops))', likesCount: 62 },\r\n    ] as PostsType[],\r\n    profile: null as null | ProfileType,\r\n    status: '',\r\n    newPostText: '',\r\n}\r\nconst profileReducer = (state = initialState, action: ProfileReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.payload.newPostText,\r\n                likesCount: 0\r\n            };\r\n            // return { ...state, posts: [...state.posts, newPost]};\r\n            return { ...state, posts: [...state.posts, newPost], newPostText: '' };\r\n        case DELETE_POST:\r\n            return { ...state, posts: state.posts.filter(post => action.payload.postId !== post.id) }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: action.payload.profile }\r\n        case SET_STATUS:\r\n            return { ...state, status: action.payload.status }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return { ...state, profile: { ...state.profile, photos: action.payload.photos } as ProfileType } //Исправить\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreater: (newPostText: string) => ({ type: ADD_POST, payload: { newPostText } }) as const,\r\n    setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFILE, payload: { profile } }) as const,\r\n    setStatus: (status: string) => ({ type: SET_STATUS, payload: { status } }) as const,\r\n    deletePost: (postId: number) => ({ type: DELETE_POST, payload: { postId } }) as const,\r\n    savePhotoSuccess: (photos: PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, payload: { photos } }) as const,\r\n}\r\n\r\nexport const getUserProfile = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getUserProfile(userId)\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\nexport const getStatus = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (!data.resultCode) { dispatch(actions.setStatus(status)) }\r\n    }\r\n    catch (error) { }\r\n}\r\nexport const savePhoto = (file: any): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    if (!data.resultCode) { dispatch(actions.savePhotoSuccess(data.data.photos)) }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkTypeProfileReducer => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    let data = await profileAPI.saveProfile(profile)\r\n    if (!data.resultCode) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"UserId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', { _error: data.message[0] }))\r\n        return Promise.reject(data.message[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import { ActionsTypes } from \"./redux-store\";\r\n\r\nconst SEND_MESSAGE = 'SN/DIALOGS/SEND_MESSAGE';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Viktor' },\r\n        { id: 2, name: 'Sveta' },\r\n        { id: 3, name: 'Igor' },\r\n        { id: 4, name: 'Masha' },\r\n        { id: 5, name: 'Petya' },\r\n        { id: 6, name: 'Viсtoria' }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'Bye' },\r\n        { id: 3, message: 'Hello' },\r\n        { id: 4, message: 'Mess' },\r\n        { id: 5, message: 'Mess123' },\r\n        { id: 6, message: 'Mess456' },\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsReducerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.payload.newMessageBody;\r\n            return { ...state, messages: [...state.messages, { id: 7, message: body }] };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    sendMessageCreater: (newMessageBody: string) => ({ type: SEND_MESSAGE, payload: { newMessageBody } } as const)\r\n}\r\n\r\nexport type DialogsReducerActionTypes = ActionsTypes<typeof actions>\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1W_Jk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__1rooW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__summaryError\":\"Login_form__summaryError__1b8EM\"};","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\nimport { ResultCodesEnum } from './auth-api';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"e82d0870-e644-47bb-8212-44d44c6489be\",\r\n    }\r\n})\r\n\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    message: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n","import { instance, APIResponseType } from \"./api\"\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, { email, password, rememberMe, captcha })\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10,\r\n}","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import { GetItemsType, instance, APIResponseType } from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+(friend===null?\"\":`&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/` + userId)\r\n            .then(response => response.data) as Promise<APIResponseType>\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/` + userId)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps }\r\n        }\r\n        return u\r\n    })\r\n}\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { APIResponseType } from '../api/api';\r\nimport { usersAPI } from '../api/users-api'\r\nimport { PhotosType, UserType } from '../types/types';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst SET_USERS = 'SN/USERS/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SN/USERS/SET_CURRENT_PAGE';\r\nconst SET_FILTER = 'SN/USERS/SET_FILTER';\r\nconst SET_TOTAL_COUNT = 'SN/USERS/SET_TOTAL_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport type UserReducerActionsTypes = ActionsTypes<typeof actions>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array os users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UserReducerActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: true } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: true }) };\r\n        case UNFOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: false } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: false }) };\r\n        case SET_USERS:\r\n            return { ...state, users: action.payload.users };\r\n        case SET_CURRENT_PAGE:\r\n            return { ...state, currentPage: action.payload.currentPage }\r\n        case SET_FILTER:\r\n            return { ...state, filter: action.payload }\r\n        case SET_TOTAL_COUNT:\r\n            return { ...state, totalUsersCount: action.payload.totalUsersCount }\r\n        case TOGGLE_IS_FETCHING:\r\n            return { ...state, isFetching: action.payload.isFetching }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (id: number) => ({ type: FOLLOW, payload: { id } } as const),\r\n    unfollowSuccess: (id: number) => ({ type: UNFOLLOW, payload: { id } } as const),\r\n    setUsers: (users: UserType[]) => ({ type: SET_USERS, payload: { users } } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: SET_CURRENT_PAGE, payload: { currentPage } } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, payload:  filter  } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: SET_TOTAL_COUNT, payload: { totalUsersCount } } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, payload: { isFetching } } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const),\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n    const data = await usersAPI\r\n        .getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UserReducerActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => UserReducerActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    const data = await apiMethod(userId)\r\n    !data.resultCode && dispatch(actionCreator(userId));\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    let actionCreator = actions.followSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\nexport const unfollow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    let actionCreator = actions.unfollowSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n","import { instance } from \"./api\"\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(response => response.data)\r\n    },\r\n}","import { Action } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { authAPI, ResultCodesEnum } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { AppStateType, ActionsTypes, BaseThunkType } from './redux-store';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type AuthReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeAuthReducer = BaseThunkType<AuthReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nconst SET_USER_DATA = 'SN/AUTH/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        { type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const\r\n    ),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        { type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } } as const\r\n    )\r\n}\r\n\r\nexport const getAuthUserData = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const { id, login, email } = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkTypeAuthReducer => async (dispatch) => { \r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const message = data.message.length > 0 ? data.message[0] : 'Some error'  //messages => message\r\n        const action = stopSubmit('login', { _error: message })\r\n        dispatch(action)\r\n    }\r\n}\r\nexport const logout = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer;","import { ThunkAction } from 'redux-thunk';\r\nimport { getAuthUserData } from './auth-reducer';\r\nimport { AppStateType } from './redux-store';\r\nimport {ActionsTypes} from './redux-store';\r\n\r\nconst INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppReducerActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return { ...state, initialized: true };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({ type: INITIALIZED_SUCCESS })\r\n}\r\ntype AppReducerActionTypes = ActionsTypes<typeof actions>\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, AppReducerActionTypes>\r\n\r\nexport const initializeApp = () => (dispatch: any) => {   //ТИПИЗАЦИЯ\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","import { legacy_createStore as createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n// let store = createStore(rootReducer, applyMiddleware(thunk));\r\ntype PropertyTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type ActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertyTypes<T>>\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Button, Avatar, Row, Col, Layout } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { logout } from \"../../redux/auth-reducer\";\r\n\r\nexport const Header: React.FC = () => {\r\n    const isAuth = useSelector<AppStateType>((state) => state.auth.isAuth);\r\n    const login = useSelector<AppStateType>((state) => state.auth.login);\r\n    const dispatch = useDispatch();\r\n    const logOutFunc = () => {\r\n        //@ts-ignore\r\n        dispatch(logout());\r\n    };\r\n\r\n    const { Header } = Layout;\r\n\r\n    return (\r\n        <Header className={s.header}>\r\n            <Row>\r\n                <>\r\n                    {isAuth && (\r\n                        <Col span={22}>\r\n                            <><Avatar\r\n                                style={{ backgroundColor: \"#1890ff\" }}\r\n                                icon={<UserOutlined />}\r\n                            />\r\n                            {login}\r\n                            </>\r\n                        </Col>\r\n                    )}\r\n                    <Col span={2}>\r\n                        {isAuth ? (\r\n                            <Button type=\"primary\" onClick={logOutFunc}>\r\n                                Logout\r\n                            </Button>\r\n                        ) : (\r\n                            <Button type=\"primary\">\r\n                                <NavLink to=\"/login\">Login</NavLink>\r\n                            </Button>\r\n                        )}\r\n                    </Col>\r\n                </>\r\n            </Row>\r\n        </Header>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport s from \"./Pagination.module.scss\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    onPageChanged: (pageNumber: number) => void;\r\n    portionSize?: number;\r\n};\r\n\r\nconst Pagination: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 10,\r\n}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = React.useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1);\r\n                    }}\r\n                >\r\n                    «\r\n                </button>\r\n            )}\r\n\r\n            {pages\r\n                .filter(\r\n                    (p) =>\r\n                        p >= leftPortionPageNumber &&\r\n                        p <= rightPortionPageNumber\r\n                )\r\n                .map((p) => {\r\n                    return (\r\n                        <span\r\n                            className={\r\n                                (currentPage === p && s.selectedPage) || \"\"\r\n                            }\r\n                            key={p}\r\n                            onClick={(e) => onPageChanged(p)}\r\n                        >\r\n                            {p}\r\n                        </span>\r\n                    );\r\n                })}\r\n            {portionCount > portionNumber && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1);\r\n                    }}\r\n                >\r\n                    »\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport s from \"./Users.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType;\r\n    followingInProgress: Array<number>;\r\n    unfollow: (userId: number) => void;\r\n    follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n    user,\r\n    followingInProgress,\r\n    unfollow,\r\n    follow,\r\n}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.userProfile} key={user.id}>\r\n                <div className={s.userProfile__photo}>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img\r\n                            src={\r\n                                user.photos.small ||\r\n                                \"https://binkor.ru/images/vopros/user_hover.png\"\r\n                            }\r\n                            className={s.userPhoto}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div className={s.userProfile__button}>\r\n                    {user.followed ? (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                follow(user.id);\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className={s.userProfile__info}>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst getUsersSel = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSel, (users) => {\r\n    return users\r\n    // return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { FilterType } from \"../../redux/users-reducer\";\r\nimport { getUsersFilter } from \"../../redux/users-selectors\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void;\r\n};\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string;\r\n    friend: FriendFormType;\r\n};\r\n\r\nconst validate = (values: FormType) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = ({ onFilterChanged }) => {\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const submit = (\r\n        values: FormType,\r\n        { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n    ) => {\r\n        // @ts-ignore\r\n        onFilterChanged(values);\r\n        setSubmitting(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    term: filter.term,\r\n                    friend: String(filter.friend) as FriendFormType,\r\n                }}\r\n                validate={validate}\r\n                onSubmit={submit}\r\n                enableReinitialize\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);\r\n\r\n// const submit = (\r\n//     values: FormType,\r\n//     { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n// ) =>\r\n//     {\r\n//         const filter: FilterType = {\r\n//             term: values.term,\r\n//             friend:\r\n//                 values.friend === \"null\"\r\n//                     ? null\r\n//                     : values.friend === \"true\"\r\n//                     ? true\r\n//                     : false,\r\n//         };\r\n\r\n//         onFilterChanged(filter);\r\n//         setSubmitting(false);\r\n//     };\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Pagination from \"../common/Pagination/Pagination\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {\r\n    actions,\r\n    FilterType,\r\n    requestUsers,\r\n    follow,\r\n    unfollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter,\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Users: React.FC<PropsType> = () => {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const users = useSelector(getUsers);\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    React.useEffect(() => {\r\n        const parsed = Object.fromEntries(searchParams);\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n        if (parsed.page) actualPage = +parsed.page;\r\n        if (parsed.term) actualFilter = { ...actualFilter, term: parsed.term };\r\n        if (parsed.friend)\r\n            actualFilter = {\r\n                ...actualFilter,\r\n                friend:\r\n                    parsed.friend === \"null\"\r\n                        ? null\r\n                        : parsed.friend === \"true\"\r\n                        ? true\r\n                        : false,\r\n            };\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        const term = filter.term;\r\n        const friend = filter.friend;\r\n\r\n        let query =\r\n            (term === \"\" ? \"\" : `&term=${term}`) +\r\n            (friend === null ? \"\" : `&friend=${friend}`) +\r\n            (currentPage === 1 ? \"\" : `&page=${currentPage}`);\r\n\r\n        setSearchParams(query);\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const _follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    };\r\n    const _unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Pagination\r\n                    currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}\r\n                    totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n            </div>\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            </div>\r\n            {users.map((user) => (\r\n                <User\r\n                    key={user.id}\r\n                    user={user}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={_unfollow}\r\n                    follow={_follow}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Preloader } from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching } from \"../../redux/users-selectors\";\r\n\r\nexport const UsersPage: React.FC = () => {\r\n    const isFetching = useSelector(getIsFetching);\r\n    return (\r\n        <>\r\n            {isFetching && <Preloader />}\r\n            <Users />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    Input,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport s from \"./Login.module.scss\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null;\r\n};\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> &\r\n        LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Email\",\r\n                \"email\",\r\n                [required],\r\n                Input\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Password\",\r\n                \"password\",\r\n                [required],\r\n                Input,\r\n                {\r\n                    type: \"password\",\r\n                }\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                \"rememberMe\",\r\n                [],\r\n                Input,\r\n                { type: \"checkbox\" },\r\n                \"remember me\"\r\n            )}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\r\n                    \"Symbols from image\",\r\n                    \"captcha\",\r\n                    [required],\r\n                    Input,\r\n                    {}\r\n                )}\r\n            {error && <div className={s.form__summaryError}> {error} </div>}\r\n            <div>\r\n                {\" \"}\r\n                <button>Login </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector(\r\n        (state: AppStateType) => state.auth.captchaUrl\r\n    );\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(\r\n            login(\r\n                formData.email,\r\n                formData.password,\r\n                formData.rememberMe,\r\n                formData.captcha\r\n            )\r\n        );\r\n    };\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"} />;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, { lazy, Suspense, useState } from \"react\";\nimport { Route, Routes, Navigate, NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {Header} from \"../Header/Header\";\nimport { initializeApp } from \"../../redux/app-reducer\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { UsersPage } from \"../Users/UsersPage\";\nimport { LoginPage } from \"../Login/LoginPage\";\n\nimport s from \"./App.module.scss\";\nimport 'antd/dist/antd.css'\nimport { TeamOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Layout, Menu } from \"antd\";\n\nconst ProfileContainer = lazy(() => import(\"../Profile/ProfileContainer\"));\nconst DialogsContainer = lazy(() => import(\"../Dialogs/DialogsContainer\"));\n// const Login = lazy(() => import(\"../Login/LoginPage\"));\n// const UsersPage = lazy(() => import(\"../Users/UsersPage\"));\n\nconst App: React.FC = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const { Content, Footer, Sider } = Layout;\n    const { SubMenu } = Menu;\n\n    const dispatch = useDispatch();\n    const initialized = useSelector<AppStateType>(\n        (state) => state.app.initialized\n    );\n    const initializeAppCB = () => {\n        //@ts-ignore\n        dispatch(initializeApp());\n    };\n\n    const catchAllUnhandledError = (e: PromiseRejectionEvent) => {\n        // alert(\"Some error\");\n    };\n\n    React.useEffect(() => {\n        // initializeApp();\n        window.addEventListener(\"unhandledrejection\", catchAllUnhandledError);\n        return () => {\n            window.removeEventListener(\n                \"unhandledrejection\",\n                catchAllUnhandledError\n            );\n        };\n    }, []);\n    React.useEffect(() => {\n        if (!initialized) {\n            initializeAppCB();\n        }\n    }, [initialized]);\n\n    if (!initialized) {\n        return <Preloader />;\n    }\n\n    return (\n        <Layout style={{ minHeight: \"100vh\" }}>\n            <Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={(value) => setCollapsed(value)}\n            >\n                <div className={s.logo} />\n                <Menu theme=\"dark\" mode=\"inline\">\n                    <SubMenu\n                        key=\"sub1\"\n                        icon={<UserOutlined />}\n                        title=\"My Profile\"\n                    >\n                        <Menu.Item key=\"1\">\n                            <NavLink to=\"/profile\">Profile</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <NavLink to=\"/dialogs\">Messages</NavLink>\n                        </Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Users\">\n                        <Menu.Item key=\"3\">\n                            <NavLink to=\"/users\">Users</NavLink>\n                        </Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Layout className={s.siteLayout}>\n                <Header />\n                <Content style={{ margin: \"0 16px\" }}>\n                    <div\n                        className={s.siteLayoutBackground}\n                        style={{ padding: 24, minHeight: 360 }}\n                    >\n                        <div className={s.content}>\n                            <Suspense fallback={<div>Loading...</div>}>\n                                <Routes>\n                                    <Route\n                                        path=\"/\"\n                                        element={<Navigate to={\"/profile\"} />}\n                                    />\n                                    <Route\n                                        path=\"/dialogs\"\n                                        element={<DialogsContainer />}\n                                    />\n                                    <Route\n                                        path=\"/profile\"\n                                        element={<ProfileContainer />}\n                                    >\n                                        <Route\n                                            path=\":userId\"\n                                            element={<ProfileContainer />}\n                                        />\n                                    </Route>\n                                    <Route\n                                        path=\"/users\"\n                                        element={<UsersPage />}\n                                    />\n                                    <Route\n                                        path=\"/login\"\n                                        element={<LoginPage />}\n                                    />\n                                    <Route\n                                        path=\"/*\"\n                                        element={<div> 404 NOT FOUND </div>}\n                                    />\n                                </Routes>\n                            </Suspense>\n                        </div>\n                    </div>\n                </Content>\n                <Footer style={{ textAlign: \"center\" }}>\n                    Ant Design ©2022 Created by Victoria Kovaliova\n                </Footer>\n            </Layout>\n        </Layout>\n    );\n};\n\nexport default App;\n","import store from \"./redux/redux-store\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    // <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/LoginPage\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2dm5t\",\"userProfile\":\"Users_userProfile__1S7Vo\",\"userProfile__photo\":\"Users_userProfile__photo__1mEXt\",\"userProfile__button\":\"Users_userProfile__button__2CHXZ\",\"userProfile__info\":\"Users_userProfile__info__23TpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"App_logo__2Y3Fp\",\"siteLayout\":\"App_siteLayout__20lPD\",\"siteLayoutBackground\":\"App_siteLayoutBackground__myvat\"};"],"sourceRoot":""}