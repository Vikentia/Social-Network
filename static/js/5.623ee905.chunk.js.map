{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.scss","utils/validators.ts","hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.scss","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","input","props","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","Message","message","Dialog","id","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Dialogs","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","mess","dialogs__items","values","sendMessage","newMessageBody","compose","actions","sendMessageCreater"],"mappings":"+TAWMA,EAA8C,SAAC,GAI9C,IAHHC,EAGE,EAHFA,KACAC,EAEE,EAFFA,SAGMC,GADJ,iBACeF,EAAKG,SAAWH,EAAKI,OACtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACI,8BAAMH,IACLC,GAAY,+BAAOF,EAAKI,YAKxBI,EAAwC,SAAC,GAI/C,IAHHC,EAGE,EAHFA,MACAT,EAEE,EAFFA,KACGU,EACD,iBACF,OACI,cAACX,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACI,oDAAcS,GAAWC,QAKxBC,EAAqC,SAAC,GAI5C,IAHHF,EAGE,EAHFA,MACAT,EAEE,EAFFA,KACGU,EACD,iBACF,OACI,cAACX,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACI,iDAAWS,GAAWC,QAK3B,SAASE,EACZC,EAEAC,EACAC,EACAC,GAGD,IAFCN,EAEF,uDAFU,GACRO,EACF,uDADS,GAEP,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPN,IACL,IACFO,O,oBClEbE,EAAOC,QAAU,CAAC,MAAQ,+B,iCCC1B,oEAAO,IAAMC,EAA+B,SAACC,GACzC,OAAOA,OAAQC,EAAY,qBAGlBC,EAAmB,SAACC,GAAD,OAA2C,SAACH,GACxE,OAAQA,EAAMI,OAASD,EAAhB,wBAA8CA,EAA9C,iBAAoEF,K,iICG3EI,EAA6B,SAACC,GAAD,MAC5B,CAAEC,OAAQD,EAAME,KAAKD,SAEnB,SAASE,EACZC,GAoBA,OAVqCC,YAMjCN,EACA,GAPiCM,EARiC,SAClEvB,GAEA,IAAMmB,EAAyBnB,EAAzBmB,OAAWK,EAAjB,YAA+BxB,EAA/B,GACA,OAAKmB,EACE,cAACG,EAAD,eAAgBE,IADH,cAAC,IAAD,CAAUC,GAAG,gB,oBCnBzChB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,iC,kECWtDgB,EAPqB,SAAC1B,GACjC,OAAO,8BACH,8BAAMA,EAAM2B,a,QCQLC,EARqB,SAAC5B,GACjC,OACI,8BACI,eAAC,IAAD,CAASyB,GAAI,YAAczB,EAAM6B,GAAjC,cAAuC7B,EAAMI,KAA7C,U,6CCkCN0B,EAAehB,YAAiB,KA0BhCiB,EAAsBC,YAAoC,CAAEC,KAAM,wBAA5CD,EAhBxB,SAAChC,GACD,OACI,sBAAMkC,SAAUlC,EAAMmC,aAAtB,SACI,gCACKjC,YACG,qBACA,iBACA,CAACS,IAAUmB,GACXhC,KAEJ,kDASDsC,EAvDyB,SAACpC,GACrC,IAAIkB,EAAQlB,EAAMqC,YAEdC,EAAkBpB,EAAMqB,QAAQC,KAAI,SAACC,GAAD,OACpC,cAAC,EAAD,CAAwBZ,GAAIY,EAAOZ,GAAIzB,KAAMqC,EAAOrC,MAAvCqC,EAAOZ,OAEpBa,EAAmBxB,EAAMyB,SAASH,KAAI,SAACI,GAAD,OACtC,cAAC,EAAD,CAAuBjB,QAASiB,EAAKjB,SAAvBiB,EAAKf,OAOvB,OACI,sBAAKlC,UAAWC,IAAE2C,QAAlB,UACI,qBAAK5C,UAAWC,IAAEiD,eAAlB,SAAmCP,IAEnC,sBAAK3C,UAAWC,IAAE+C,SAAlB,UACI,8BAAMD,IACN,cAACX,EAAD,CAAqBG,SAVb,SAACY,GACjB9C,EAAM+C,YAAYD,EAAOE,0B,yBCdlBC,sBAA6B1B,aANtB,SAACL,GACnB,MAAO,CACHmB,YAAanB,EAAMmB,eAI0C,CAACU,YAAYG,IAAQC,qBAAqB9B,IAAhG4B,CAAkHb","file":"static/js/5.623ee905.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n    ({ isAuth: state.auth.isAuth } as MapPropsType);\r\n\r\nexport function withAuthRedirect<WCP extends object>(\r\n    Component: React.ComponentType<WCP>\r\n) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (\r\n        props\r\n    ) => {\r\n        let { isAuth, ...restProps } = props;\r\n        if (!isAuth) return <Navigate to=\"/login\" />;\r\n        return <Component {...(restProps as WCP)} />;\r\n    };\r\n\r\n    let ConnectedAuthRedirectComponent = connect<\r\n        MapPropsType,\r\n        DispatchPropsType,\r\n        WCP,\r\n        AppStateType\r\n    >(\r\n        mapStateToPropsForRedirect,\r\n        {}\r\n    )(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1hcii\",\"dialog_active\":\"Dialogs_dialog_active__2WuLP\"};","import React from \"react\";\r\n\r\ntype PropsType = {\r\n    message: string   \r\n}\r\nconst Message:React.FC<PropsType> = (props)=> {\r\n    return <div >\r\n        <div>{props.message}</div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number;\r\n    name: string;\r\n};\r\nconst Dialog: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/dialogs/\" + props.id}> {props.name} </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;\r\n","import React from \"react\";\r\nimport Message from \"./Message/Message\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport s from \"./Dialogs.module.scss\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Textarea, createField } from \"../common/FormsControls/FormsControls\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators\";\r\nimport { InitialStateType } from \"../../redux/dialogs-reducer\";\r\nimport { LoginFormValuesType } from \"../Login/Login\";\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType;\r\n    sendMessage: (messageText: string) => void;\r\n};\r\ntype NewMessageFormValuesType = {\r\n    newMessageBody: string;\r\n};\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((dialog) => (\r\n        <Dialog key={dialog.id} id={dialog.id} name={dialog.name} />\r\n    ));\r\n    let messagesElements = state.messages.map((mess) => (\r\n        <Message key={mess.id} message={mess.message} />\r\n    ));\r\n\r\n    let addNewMessage = (values: { newMessageBody: string }) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs__items}>{dialogsElements}</div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<\r\n    keyof NewMessageFormValuesType,\r\n    string\r\n>;\r\ntype PropsType = {};\r\n\r\nconst AddMessageForm: React.FC<\r\n    InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\r\n                    \"Enter your message\",\r\n                    \"newMessageBody\",\r\n                    [required, maxLength100],\r\n                    Textarea\r\n                )}\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({ form: \"dialogAddMessageForm\" })(\r\n    AddMessageForm\r\n);\r\nexport default Dialogs;\r\n","import React from 'react'\r\nimport {compose} from \"redux\";\r\nimport Dialogs from './Dialogs';\r\nimport {actions } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {sendMessage:actions.sendMessageCreater}),withAuthRedirect)(Dialogs);\r\n\r\n"],"sourceRoot":""}