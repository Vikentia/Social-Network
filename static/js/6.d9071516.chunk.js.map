{"version":3,"sources":["pages/chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","React","memo","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflow","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","userId","ref","src","photo","width","userName","TextArea","Input","setMessage","readyStatus","onChange","value","rows","onClick","sendMessage","type","disabled","ChatPage"],"mappings":"4KAmBMA,EAAiB,WACnB,IAAMC,EAAWC,cAEXC,EAASC,aAA0B,SAACC,GAAD,OAAWA,EAAMC,KAAKH,UAW/D,OATAI,qBAAU,WAGN,OADAN,EAASO,eACF,WAEHP,EAASQ,kBAEd,IAGC,gCACgB,UAAXN,GAAsB,mEACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAKND,EAAqBE,IAAMC,MAAK,WAClC,IAAMC,EAAWV,aACb,SAACC,GAAD,OAAWA,EAAMC,KAAKQ,YAEpBC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAmBA,OALAZ,qBAAU,WACa,IAAD,EAAdW,IACiB,OAAjBH,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBK,eAAnB,SAA4BC,eAAe,CAAEC,SAAU,cAE5D,CAACR,IAEA,sBACIS,MAAO,CAAEC,OAAQ,QAASC,SAAU,QACpCC,SArBc,SAACC,GACnB,IAAIC,EAAUD,EAAEE,cAEZC,KAAKC,IACDH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACnD,KAEHhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUpC,UAIKL,EAASqB,KAAI,SAACC,GAAD,OACV,cAACC,EAAD,CAAoCC,QAASF,GAA/BA,EAAEG,OAASH,EAAEE,YAE/B,qBAAKE,IAAKzB,UAKhBsB,EAAkD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvD,OACI,gCACI,qBAAKG,IAAKH,EAAQI,MAAOC,MAAO,OADpC,IAC6C,4BAAIL,EAAQM,WAAc,IACnE,4BAAIN,EAAQA,UACZ,2BAKN3B,EAA2B,WAC7B,IAAQkC,EAAaC,IAAbD,SACR,EAA8B5B,mBAAS,IAAvC,mBAAOqB,EAAP,KAAgBS,EAAhB,KAEMC,EAAc5C,aAA0B,SAACC,GAAD,OAAWA,EAAMC,KAAKH,UAE9DF,EAAWC,cAQjB,OACI,gCACI,cAAC2C,EAAD,CACII,SAAU,SAACtB,GAAD,OAAOoB,EAAWpB,EAAEE,cAAcqB,QAC5CA,MAAOZ,EACPa,KAAM,IAEV,cAAC,IAAD,CACIC,QAde,WAClBd,IAELrC,EAASoD,YAAYf,IACrBS,EAAW,MAWHO,KAAK,UACLC,SAA0B,UAAhBP,EAHd,sBAUGQ,UA7GY,WACvB,OACI,8BACI,cAACxD,EAAD","file":"static/js/6.d9071516.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Button, Input } from \"antd\";\r\nimport { ChatMessageType } from \"../../api/chat-api\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    sendMessage,\r\n    startMessagesListening,\r\n    stopMessagesListening,\r\n} from \"../../redux/chat-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector<AppStateType>((state) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            //@ts-ignore\r\n            dispatch(stopMessagesListening());\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Some error. Please refresh page!</div>}\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Messages: React.FC = React.memo(() => {\r\n    const messages = useSelector<AppStateType>(\r\n        (state) => state.chat.messages\r\n    ) as ChatMessageType[];\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false);\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget;\r\n        if (\r\n            Math.abs(\r\n                element.scrollHeight - element.scrollTop - element.clientHeight\r\n            ) < 300\r\n        ) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]);\r\n    return (\r\n        <div\r\n            style={{ height: \"400px\", overflow: \"auto\" }}\r\n            onScroll={scrollHandler}\r\n        >\r\n            {messages.map((m) => (\r\n                <Message key={m.userId + m.message} message={m} />\r\n            ))}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} width={\"20\"} /> <b>{message.userName}</b>{\" \"}\r\n            <p>{message.message}</p>\r\n            <hr />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const { TextArea } = Input;\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const readyStatus = useSelector<AppStateType>((state) => state.chat.status);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return;\r\n        //@ts-ignore\r\n        dispatch(sendMessage(message));\r\n        setMessage(\"\");\r\n    };\r\n    return (\r\n        <div>\r\n            <TextArea\r\n                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                value={message}\r\n                rows={2}\r\n            />\r\n            <Button\r\n                onClick={sendMessageHandler}\r\n                type=\"primary\"\r\n                disabled={readyStatus !== \"ready\"}\r\n            >\r\n                Send\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\nexport default ChatPage;\r\n"],"sourceRoot":""}