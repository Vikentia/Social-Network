{"version":3,"sources":["api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/common/Pagination/Pagination.module.scss","components/Login/Login.module.scss","api/api.ts","components/common/FormsControls/FormsControls.tsx","api/auth-api.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navigation/Navigation.tsx","components/common/Pagination/Pagination.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Login/LoginPage.tsx","components/App/App.tsx","index.tsx","components/Navigation/Navigation.module.scss","components/Users/Users.module.scss","utils/validators.ts","assets/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss","components/App/App.module.scss","components/Header/Header.module.scss"],"names":["profileAPI","userId","instance","get","then","response","data","newStatus","put","status","file","formData","FormData","append","headers","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreater","type","payload","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","filter","post","SEND_MESSAGE","dialogs","name","messages","sendMessageCreater","newMessageBody","dialogsReducer","body","module","exports","axios","create","withCredentials","baseURL","FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","input","props","Input","createField","placeholder","validators","component","text","validate","ResultCodesEnum","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","delete","follow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_FILTER","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","requestUsers","page","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","login","isAuth","captchaUrl","getAuthUserData","Success","getCaptchaUrl","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","header","loginBlock","onClick","logout","to","HeaderContainer","this","React","Component","connect","Navigation","nav","title","nav__item","Pagination","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","p","selectedPage","e","User","user","userProfile","userProfile__photo","src","small","userPhoto","userProfile__button","disabled","some","userProfile__info","values","UsersSearchForm","onFilterChanged","initialValues","onSubmit","setSubmitting","isSubmitting","as","value","memo","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","getIsFetching","getUsersFilter","Users","useSelector","useDispatch","useEffect","_follow","bind","_unfollow","pageNumber","UsersPage","Preloader","LoginReduxForm","reduxForm","handleSubmit","required","undefined","form__summaryError","LoginPage","CaptchaIsRequired","length","ProfileContainer","lazy","DialogsContainer","App","catchAllUnhandledError","initializeApp","addEventListener","removeEventListener","content","fallback","path","element","promise","all","ReactDOM","render","document","getElementById","maxLengthCreator","maxLength","preloader"],"mappings":"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","file":"static/js/main.e32a7f04.chunk.js","sourcesContent":["import { PhotosType, ProfileType } from \"../types/types\"\r\nimport { instance, APIResponseType } from \"./api\"\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(newStatus: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, { status: newStatus })\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(file: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile)\r\n            .then(response => response.data)\r\n    },\r\n}","import { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { profileAPI } from '../api/profile-api'\r\nimport { PhotosType, PostsType, ProfileType } from '../types/types';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst ADD_POST = 'SN/PROFILE/ADD-POST';\r\nconst DELETE_POST = 'SN/PROFILE/DELETE_POST';\r\nconst SET_USER_PROFILE = 'SN/PROFILE/SET_USER_PROFILE';\r\nconst SET_STATUS = 'SN/PROFILE/SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE_PHOTO_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ProfileReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeProfileReducer = BaseThunkType<ProfileReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Post1', likesCount: 12 },\r\n        { id: 2, message: 'Post2', likesCount: 34 },\r\n        { id: 3, message: 'Post3', likesCount: 52 },\r\n        { id: 4, message: 'Post4', likesCount: 42 },\r\n        { id: 5, message: 'Post5', likesCount: 18 },\r\n        { id: 6, message: 'Post6', likesCount: 62 },\r\n    ] as PostsType[],\r\n    profile: null as null | ProfileType,\r\n    status: '',\r\n    newPostText: '',\r\n}\r\nconst profileReducer = (state = initialState, action: ProfileReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.payload.newPostText,\r\n                likesCount: 0\r\n            };\r\n            // return { ...state, posts: [...state.posts, newPost]};\r\n            return { ...state, posts: [...state.posts, newPost], newPostText: '' };\r\n        case DELETE_POST:\r\n            return { ...state, posts: state.posts.filter(post => action.payload.postId !== post.id) }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: action.payload.profile }\r\n        case SET_STATUS:\r\n            return { ...state, status: action.payload.status }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return { ...state, profile: { ...state.profile, photos: action.payload.photos } as ProfileType } //Исправить\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreater: (newPostText: string) => ({ type: ADD_POST, payload: { newPostText } }) as const,\r\n    setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFILE, payload: { profile } }) as const,\r\n    setStatus: (status: string) => ({ type: SET_STATUS, payload: { status } }) as const,\r\n    deletePost: (postId: number) => ({ type: DELETE_POST, payload: { postId } }) as const,\r\n    savePhotoSuccess: (photos: PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, payload: { photos } }) as const,\r\n}\r\n\r\nexport const getUserProfile = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getUserProfile(userId)\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\nexport const getStatus = (userId: number): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (!data.resultCode) { dispatch(actions.setStatus(status)) }\r\n    }\r\n    catch (error) { }\r\n}\r\nexport const savePhoto = (file: any): BaseThunkType<ProfileReducerActionTypes> => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    if (!data.resultCode) { dispatch(actions.savePhotoSuccess(data.data.photos)) }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkTypeProfileReducer => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    let data = await profileAPI.saveProfile(profile)\r\n    if (!data.resultCode) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"UserId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', { _error: data.message[0] }))\r\n        return Promise.reject(data.message[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import { ActionsTypes } from \"./redux-store\";\r\n\r\nconst SEND_MESSAGE = 'SN/DIALOGS/SEND_MESSAGE';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Viktor' },\r\n        { id: 2, name: 'Sveta' },\r\n        { id: 3, name: 'Igor' },\r\n        { id: 4, name: 'Masha' },\r\n        { id: 5, name: 'Petya' },\r\n        { id: 6, name: 'Viсtoria' }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'Bye' },\r\n        { id: 3, message: 'Hello' },\r\n        { id: 4, message: 'Mess' },\r\n        { id: 5, message: 'Mess123' },\r\n        { id: 6, message: 'Mess456' },\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsReducerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.payload.newMessageBody;\r\n            return { ...state, messages: [...state.messages, { id: 7, message: body }] };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    sendMessageCreater: (newMessageBody: string) => ({ type: SEND_MESSAGE, payload: { newMessageBody } } as const)\r\n}\r\n\r\nexport type DialogsReducerActionTypes = ActionsTypes<typeof actions>\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__1rooW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__summaryError\":\"Login_form__summaryError__1b8EM\"};","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\nimport { ResultCodesEnum } from './auth-api';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"e82d0870-e644-47bb-8212-44d44c6489be\",\r\n    }\r\n})\r\n\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    message: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators\";\r\nimport { LoginFormValuesType } from \"../../Login/LoginPage\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <textarea {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({\r\n    input,\r\n    meta,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <FormControl {...input} meta={meta}>\r\n            <input {...input} {...props} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    // name: string,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {},\r\n    text = \"\"\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","import { instance, APIResponseType } from \"./api\"\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, { email, password, rememberMe, captcha })\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10,\r\n}","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import { GetItemsType, instance, APIResponseType } from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+(friend===null?\"\":`&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/` + userId)\r\n            .then(response => response.data) as Promise<APIResponseType>\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/` + userId)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps }\r\n        }\r\n        return u\r\n    })\r\n}\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { APIResponseType } from '../api/api';\r\nimport { usersAPI } from '../api/users-api'\r\nimport { PhotosType, UserType } from '../types/types';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { ActionsTypes, AppStateType, BaseThunkType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst SET_USERS = 'SN/USERS/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SN/USERS/SET_CURRENT_PAGE';\r\nconst SET_FILTER = 'SN/USERS/SET_FILTER';\r\nconst SET_TOTAL_COUNT = 'SN/USERS/SET_TOTAL_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport type UserReducerActionsTypes = ActionsTypes<typeof actions>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array os users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UserReducerActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: true } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: true }) };\r\n        case UNFOLLOW:\r\n            // return { ...state, users: state.users.map(item => item.id === action.payload.id ? { ...item, followed: false } : item) };\r\n            return { ...state, users: updateObjectInArray(state.users, action.payload.id, 'id', { followed: false }) };\r\n        case SET_USERS:\r\n            return { ...state, users: action.payload.users };\r\n        case SET_CURRENT_PAGE:\r\n            return { ...state, currentPage: action.payload.currentPage }\r\n        case SET_FILTER:\r\n            return { ...state, filter: action.payload }\r\n        case SET_TOTAL_COUNT:\r\n            return { ...state, totalUsersCount: action.payload.totalUsersCount }\r\n        case TOGGLE_IS_FETCHING:\r\n            return { ...state, isFetching: action.payload.isFetching }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (id: number) => ({ type: FOLLOW, payload: { id } } as const),\r\n    unfollowSuccess: (id: number) => ({ type: UNFOLLOW, payload: { id } } as const),\r\n    setUsers: (users: UserType[]) => ({ type: SET_USERS, payload: { users } } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: SET_CURRENT_PAGE, payload: { currentPage } } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, payload:  filter  } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: SET_TOTAL_COUNT, payload: { totalUsersCount } } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, payload: { isFetching } } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const),\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n    const data = await usersAPI\r\n        .getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UserReducerActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => UserReducerActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    const data = await apiMethod(userId)\r\n    !data.resultCode && dispatch(actionCreator(userId));\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    let actionCreator = actions.followSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\nexport const unfollow = (userId: number): BaseThunkType<UserReducerActionsTypes> => async (dispatch) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    let actionCreator = actions.unfollowSuccess\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n","import { instance } from \"./api\"\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(response => response.data)\r\n    },\r\n}","import { Action } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { authAPI, ResultCodesEnum } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { AppStateType, ActionsTypes, BaseThunkType } from './redux-store';\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type AuthReducerActionTypes = ActionsTypes<typeof actions>\r\ntype ThunkTypeAuthReducer = BaseThunkType<AuthReducerActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nconst SET_USER_DATA = 'SN/AUTH/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthReducerActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        { type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const\r\n    ),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        { type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } } as const\r\n    )\r\n}\r\n\r\nexport const getAuthUserData = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const { id, login, email } = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkTypeAuthReducer => async (dispatch) => { \r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const message = data.message.length > 0 ? data.message[0] : 'Some error'  //messages => message\r\n        const action = stopSubmit('login', { _error: message })\r\n        dispatch(action)\r\n    }\r\n}\r\nexport const logout = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): BaseThunkType<AuthReducerActionTypes> => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer;","import { ThunkAction } from 'redux-thunk';\r\nimport { getAuthUserData } from './auth-reducer';\r\nimport { AppStateType } from './redux-store';\r\nimport {ActionsTypes} from './redux-store';\r\n\r\nconst INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppReducerActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return { ...state, initialized: true };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({ type: INITIALIZED_SUCCESS })\r\n}\r\ntype AppReducerActionTypes = ActionsTypes<typeof actions>\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, AppReducerActionTypes>\r\n\r\nexport const initializeApp = () => (dispatch: any) => {   //ТИПИЗАЦИЯ\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","import { legacy_createStore as createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n// let store = createStore(rootReducer, applyMiddleware(thunk));\r\ntype PropertyTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type ActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertyTypes<T>>\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean;\r\n    login: string | null\r\n};\r\nexport type DispatchPropsType = {\r\n    logout: () => void;\r\n};\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <div className={s.header}>\r\n            Шапка сайта\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? (\r\n                    <div>\r\n                        {props.login} -{\" \"}\r\n                        <button onClick={props.logout}>LogOut</button>\r\n                    </div>\r\n                ) : (\r\n                    <NavLink to=\"/login\">Login</NavLink>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header, { MapPropsType, DispatchPropsType } from './Header';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => ({\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n});\r\n\r\nexport default connect<MapPropsType,DispatchPropsType,{},AppStateType>(mapStateToProps, {  logout })(HeaderContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  const HeaderContainer = (props) => {\r\n    //     const state = useSelector(state => state.auth)\r\n    //     const dispatch = useDispatch()\r\n    //     const setAuthUserDataDispatch = ({ id, email, login }) => dispatch(setAuthUserData(id, email, login))\r\n    \r\n    //     React.useEffect(() => {\r\n    //         axios\r\n    //             .get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n    //                 withCredentials: true,\r\n    //             })\r\n    //             .then((response) => {\r\n    //                 setAuthUserDataDispatch(response.data.data)\r\n    //             });\r\n    //     }, [])\r\n    //     console.log('state', state);\r\n    //     return <Header {...props} state={state} setAuthUserDataDispatch={setAuthUserDataDispatch} />\r\n    \r\n    // }\r\n    \r\n    // export default HeaderContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navigation.module.scss';\r\n\r\nconst Navigation:React.FC = () => {\r\n    return (\r\n        <div className={s.nav}>\r\n            <div className={s.title}> Навигационное меню </div>\r\n\r\n            <div className={s.nav__item}>\r\n                <NavLink to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={s.nav__item}>\r\n                <NavLink to=\"/dialogs\">Messages</NavLink>\r\n            </div>\r\n            <div className={s.nav__item}>\r\n                <NavLink to=\"/users\">Users</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport s from \"./Pagination.module.scss\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    onPageChanged: (pageNumber: number) => void;\r\n    portionSize?: number;\r\n};\r\n\r\nconst Pagination: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 10,\r\n}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = React.useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1);\r\n                    }}\r\n                >\r\n                    «\r\n                </button>\r\n            )}\r\n\r\n            {pages\r\n                .filter(\r\n                    (p) =>\r\n                        p >= leftPortionPageNumber &&\r\n                        p <= rightPortionPageNumber\r\n                )\r\n                .map((p) => {\r\n                    return (\r\n                        <span\r\n                            className={\r\n                                (currentPage === p && s.selectedPage) || \"\"\r\n                            }\r\n                            key={p}\r\n                            onClick={(e) => onPageChanged(p)}\r\n                        >\r\n                            {p}\r\n                        </span>\r\n                    );\r\n                })}\r\n            {portionCount > portionNumber && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1);\r\n                    }}\r\n                >\r\n                    »\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport s from \"./Users.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType;\r\n    followingInProgress: Array<number>;\r\n    unfollow: (userId: number) => void;\r\n    follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n    user,\r\n    followingInProgress,\r\n    unfollow,\r\n    follow,\r\n}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.userProfile} key={user.id}>\r\n                <div className={s.userProfile__photo}>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img\r\n                            src={\r\n                                user.photos.small ||\r\n                                \"https://binkor.ru/images/vopros/user_hover.png\"\r\n                            }\r\n                            className={s.userPhoto}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div className={s.userProfile__button}>\r\n                    {user.followed ? (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            disabled={followingInProgress.some(\r\n                                (id) => id === user.id\r\n                            )}\r\n                            onClick={() => {\r\n                                follow(user.id);\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className={s.userProfile__info}>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { FilterType } from \"../../redux/users-reducer\";\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void;\r\n};\r\ntype FormType = {\r\n    term: string;\r\n    friend: \"true\" | \"false\" | \"null\";\r\n};\r\n\r\nconst validate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = ({ onFilterChanged }) => {\r\n    const submit = (\r\n        values: FilterType,\r\n        { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n    ) => {\r\n        onFilterChanged(values);\r\n        setSubmitting(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ term: \"\", friend: null }}\r\n                validate={validate}\r\n                onSubmit={submit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);\r\n\r\n// const submit = (\r\n//     values: FormType,\r\n//     { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n// ) =>\r\n//     {\r\n//         const filter: FilterType = {\r\n//             term: values.term,\r\n//             friend:\r\n//                 values.friend === \"null\"\r\n//                     ? null\r\n//                     : values.friend === \"true\"\r\n//                     ? true\r\n//                     : false,\r\n//         };\r\n\r\n//         onFilterChanged(filter);\r\n//         setSubmitting(false);\r\n//     };\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst getUsersSel = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSel, (users) => {\r\n    return users\r\n    // return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Pagination from \"../common/Pagination/Pagination\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {\r\n    actions,\r\n    FilterType,\r\n    requestUsers,\r\n    follow,\r\n    unfollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter,\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Users: React.FC<PropsType> = () => {\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const users = useSelector(getUsers);\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(requestUsers(currentPage, pageSize, filter));\r\n    }, []);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const _follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    };\r\n    const _unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Pagination\r\n                    currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}\r\n                    totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n            </div>\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            </div>\r\n            {users.map((user) => (\r\n                <User\r\n                    key={user.id}\r\n                    user={user}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={_unfollow}\r\n                    follow={_follow}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Preloader } from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching } from \"../../redux/users-selectors\";\r\n\r\nexport const UsersPage: React.FC = () => {\r\n    const isFetching = useSelector(getIsFetching);\r\n    return (\r\n        <>\r\n            {isFetching && <Preloader />}\r\n            <Users />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    Input,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport s from \"./Login.module.scss\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null;\r\n};\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> &\r\n        LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Email\",\r\n                \"email\",\r\n                [required],\r\n                Input\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                \"Password\",\r\n                \"password\",\r\n                [required],\r\n                Input,\r\n                {\r\n                    type: \"password\",\r\n                }\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                \"rememberMe\",\r\n                [],\r\n                Input,\r\n                { type: \"checkbox\" },\r\n                \"remember me\"\r\n            )}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\r\n                    \"Symbols from image\",\r\n                    \"captcha\",\r\n                    [required],\r\n                    Input,\r\n                    {}\r\n                )}\r\n            {error && <div className={s.form__summaryError}> {error} </div>}\r\n            <div>\r\n                {\" \"}\r\n                <button>Login </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector(\r\n        (state: AppStateType) => state.auth.captchaUrl\r\n    );\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch = useDispatch<any>();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(\r\n            login(\r\n                formData.email,\r\n                formData.password,\r\n                formData.rememberMe,\r\n                formData.captcha\r\n            )\r\n        );\r\n    };\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"} />;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, { lazy, Suspense } from \"react\";\nimport s from \"./App.module.scss\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport Navigation from \"../Navigation/Navigation\";\nimport { Route, Routes, Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { initializeApp } from \"../../redux/app-reducer\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { UsersPage } from \"../Users/UsersPage\";\nimport { LoginPage } from \"../Login/LoginPage\";\nconst ProfileContainer = lazy(() => import(\"../Profile/ProfileContainer\"));\nconst DialogsContainer = lazy(() => import(\"../Dialogs/DialogsContainer\"));\n// const Login = lazy(() => import(\"../Login/LoginPage\"));\n// const UsersPage = lazy(() => import(\"../Users/UsersPage\"));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n    initializeApp: () => void;\n};\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledError = (e: PromiseRejectionEvent) => {\n        // alert(\"Some error\");\n    };\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener(\n            \"unhandledrejection\",\n            this.catchAllUnhandledError\n        );\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\n            \"unhandledrejection\",\n            this.catchAllUnhandledError\n        );\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />;\n        }\n        return (\n            <div className={s.App}>\n                <HeaderContainer />\n                <Navigation />\n\n                <div className={s.content}>\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Routes>\n                            <Route\n                                path=\"/\"\n                                element={<Navigate to={\"/profile\"} />}\n                            />\n                            <Route\n                                path=\"/dialogs\"\n                                element={<DialogsContainer />}\n                            />\n                            <Route\n                                path=\"/profile\"\n                                element={<ProfileContainer />}\n                            >\n                                <Route\n                                    path=\":userId\"\n                                    element={<ProfileContainer />}\n                                />\n                            </Route>\n                            <Route path=\"/users\" element={<UsersPage />} />\n                            <Route path=\"/login\" element={<LoginPage />} />\n                            <Route\n                                path=\"/*\"\n                                element={<div> 404 NOT FOUND </div>}\n                            />\n                        </Routes>\n                    </Suspense>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n});\n\nexport default connect(mapStateToProps, { initializeApp })(App);\n","import store from './redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n    // <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__2J0oM\",\"nav__item\":\"Navigation_nav__item__1NMZ9\",\"title\":\"Navigation_title__eaAEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2dm5t\",\"userProfile\":\"Users_userProfile__1S7Vo\",\"userProfile__photo\":\"Users_userProfile__photo__1mEXt\",\"userProfile__button\":\"Users_userProfile__button__2CHXZ\",\"userProfile__info\":\"Users_userProfile__info__23TpK\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    return (value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","export default __webpack_public_path__ + \"static/media/preloader.ea356991.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/preloader.svg\";\r\n\r\nexport const Preloader:React.FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} />\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2LN0j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2D-eb\",\"content\":\"App_content__1Z6Zu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1W_Jk\",\"loginBlock\":\"Header_loginBlock__3Ipvt\"};"],"sourceRoot":""}